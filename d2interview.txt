//Patterns заучить по 3 вида из каждого, MVC, module
//React, pure components, context, react.element, react component
//setState (prev state, state) (функция внутри) setState асинхронный
//testing pyramide, tdd, bdd
//try, catch, throw
//Data stuctures js,
//css reflow, написаь html с нуля, доступность
//webpack
//event loop (in details)
//Чистый код. Качество кода

Чистота кода js
Исходя из этих идей, чистый код можно определить как код, написанный так, что он сам себя описывает. Этот код без бруда смогут понять люди, его легко будет модифицировать или расширить.
* Строгие проверки на равенство
* Называйте переменные так, чтобы их имена расскрывали бы их сущность, их роль в программе. 
* В методе map, reduce, именовать не u, i => user, item etc
* Имена фунций должны сообщать читателю кода о том, что именно делает эти функции
* Используйте аргументы по умолчанию, отдавая им предпочтение перед условвными кострукциями.
* Функция должна решать одну задачу. Стремитесь к тому, чтобы одна функция не выполняла бы множество действий
* Не загрязняйте глобальную область видимости. Если вам нужно расширить существующий объект = используйте Es классы и механизмы наследования вместо того, чтобы создаваь фунцкии в цепочке прототипов стандартных объектов. 
* Избегайте логических конструкций везде, где это возможно. Вместо них используйте полиморфизм и наследование. 

Code Smells это некий набор общих признаков, которые указывают на то, что код недостаточно хорош, и для его чистоты протребуется рефакторинг.
* Дублированный код и логика, копи паст строк не самое удоачное сочетание. Такое действие может привести к логическим изъянам в коде т.е к логическому задвоению.
* Длинные методы и классы
* Дублирующие методы в тех же или разных классах (наличие двух методов с одинаковым функционалом)
* Неиспользуемый код, закоментированный код

Топ 10 OWASP 

CORS

XSS

Символ (symbol) – примитивный тип данных, использующийся для создания уникальных идентификаторов.
Символы создаются вызовом функции Symbol(), в которую можно передать описание (имя) символа.
Даже если символы имеют одно и то же имя, это – разные символы. Если мы хотим, чтобы одноимённые символы были равны, то следует использовать глобальный реестр: вызов Symbol.for(key) возвращает (или создаёт) глобальный символ с key в качестве имени. Многократные вызовы команды Symbol.for с одним и тем же аргументом возвращают один и тот же символ.

Service Workers — наверняка, вы что-то об этом слышали. Что это такое? Говоря простыми словами, это сценарий, который запускается браузером в фоновом режиме. Он никак не связан с веб-страницей или DOM и предоставляет функции “из коробки”, такие как обработка сетевых запросов, push-уведомления и фоновая синхронизация. Service workers обеспечивают возможность работы offline.
Service worker — посредник между клиентом и сервером, пропускающий через себя все запросы к серверу. С его помощью можно перехватывать все запросы “на лету”.

Service workers подобны Javascript workers. Они не связаны с DOM или веб-страницами. Они работают на другом потоке и получают доступ к DOM с помощью API postMessage. При разработке прогрессивных веб-приложений (PWA) стоит обратить внимание на service workers и стратегии кэширования.
Примечание - Service workers не относятся к web workers. Web workers -это сценарии, выполняющие нагрузочные вычисления на другом потоке без блокировки основного цикла событий и замедлений в работе UI.

try {
// здесь в коде что то может пойти не так, если есть поломка " бросить" исключение.
} catch(err) {
// здесь пишем обработчик ошибки (в переменную err предается код возникшей ошибки) например аргумент оператора throw , генерируем исключение.
throw new Error ( "Ошибка в блоке №...");
} finally {
// Здесь пишем, что должно выполнится в любом случае, есть ли ошибка или нет ( или при завершении по любому оператору перехода return, break, continue).
}

CDN contend delivery network загружаем статические файлы, серверы расбросаны по всему миру. И у пользователя будет быстрый доступ к этой сети. Нежели к нашему только в России хотя он в Америке

* Что нового привнес в JS стандарт ES6 или ECMAScript2015?
Стрелочные функции (Arrow Functions).
Классы (Classes).
Шаблонные строки (Template Strings).
Расширенные объектные литералы (Enhanced Object literals).
Деструктуризация (Object Destructuring).
Промисы (Promises).
Генераторы (Generators).
Модули (Modules).
Symbol.
Прокси (Proxies).
Множества (Sets).
Параметры по умолчанию.
Операторы rest и spread.
Блочная область видимости (ключевые слова «let» и «const»).



