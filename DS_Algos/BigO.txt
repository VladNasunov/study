Константная сложность

О(1)

это проход по обычным функциям 
те произходит одинаковое количество операций
const a = []
console.log(a)
function a(){return a.length()}

2. Линейная сложность O(n)
это когда один цикл проходит 
for(let i = 0; i < arr.length; i++){}
те когда массив увеличится, то увеличится и количество циклов

3. O(logN) бинарный поиск
Логарифм числа - это показатель степени, то есть, в какую степень надо возвести число, которое стоит в основании, чтобы получить число  в выражении логарифма. Например, log28
в какую степень надо возвести 2, чтобы получить 8
это  log28=3

те если 100 элементов
то сложность O(log_2 100) 6.64 ~ 7

4. O(n log n) Merge sort 

5. Экспоненцияальная O(2 в степени n)

6. Факториальная сложность (задача о коммивояжере)
O(n!)

Факториал вычисляется
3! = 3*2*1 = 6
5! = 5*4*3*2*1 = 120
7! = 5040

........................
Если идут 2 цикла подряд, то мы их складываем
for()
for()
O(2*n)

Но мы можем отбросить все константы и получится O(n)

Также если перед O(n2) у нас цикл forEach то отбрасываем ее сложность и остается также
O(n2)

................
Если сложность O(n + log n ) То можно отросить логарифмическую сложность тк она растет в разы меньше чем Линейная

.................
O(60*2^n + 10*n^100)отбрасываем константы => O(2^n + n^100) => математически можно доказать что 2^n растет быстрее n^100. Поэтому ответ
O(2^n)


////////////
Сложность O(A*B)
сложить числа в массиве
const arr = [[1,2], [2,3], [3,4]]

.................
Сложность Рекурсии O(2^N)
function recursion(n){
    if(n === 0) return 1;

    return recursion(n - 1) + recursion(n - 2)
}