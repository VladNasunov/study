
//DOM selection, traversing, modification, live collection
//Global object window (location, history, navigator, screen, document, cookies)
//Event Handling (mouse, keyboard, event phases, event listeners, propagation)

// объем данных, сохранённых для каждого источника, ограничивается 10 МБ. Это было сделано, чтобы избежать проблем с памятью, вызванных чрезмерным использованием веб-хранилища.

//Cookies 
Это текстовые файлы, которые хранятся на Вашем компьютере в скрытой папке браузера. В cookies содержатся данные, которые Вы вводили на всех сайтах.

Куки – это небольшие строки данных, которые хранятся непосредственно в браузере. Они являются частью HTTP-протокола, определённого в спецификации RFC 6265.

Куки обычно устанавливаются веб-сервером при помощи заголовка Set-Cookie. Затем браузер будет автоматически добавлять их в (почти) каждый запрос на тот же домен при помощи заголовка Cookie.

Один из наиболее частых случаев использования куки – это аутентификация:

При входе на сайт сервер отсылает в ответ HTTP-заголовок Set-Cookie для того, чтобы установить куки со специальным уникальным идентификатором сессии («session identifier»).
Во время следующего запроса к этому же домену браузер посылает на сервер HTTP-заголовок Cookie.
Таким образом, сервер понимает, кто сделал запрос.
Мы также можем получить доступ к куки непосредственно из браузера, используя свойство document.cookie.

Запись в document.cookie обновит только упомянутые в ней куки, но при этом не затронет все остальные.
document.cookie = "user=John"; // обновляем только куки с именем 'user

document.cookie предоставляет доступ к куки
операция записи изменяет только то куки, которое было указано.
имя и значение куки должны быть закодированы.
одно куки вмещает до 4kb данных, разрешается более 20 куки на сайт (зависит от браузера).

Настройки куки:

path=/, по умолчанию устанавливается текущий путь, делает куки видимым только по указанному пути и ниже.
domain=site.com, по умолчанию куки видно только на текущем домене, если явно указан домен, то куки видно и на поддоменах.
expires или max-age устанавливает дату истечения срока действия, без них куки умрёт при закрытии браузера.
secure делает куки доступным только при использовании HTTPS.
samesite запрещает браузеру отправлять куки с запросами, поступающими извне, помогает предотвратить XSRF-атаки.

httpOnly
Эта настройка не имеет ничего общего с JavaScript, но мы должны упомянуть её для полноты изложения.
Веб-сервер использует заголовок Set-Cookie для установки куки. И он может установить настройку httpOnly.
Эта настройка запрещает любой доступ к куки из JavaScript. Мы не можем видеть такое куки или манипулировать им с помощью document.cookie.

Существует несколько ограничений:
После encodeURIComponent пара name=value не должна занимать более 4Кб. Таким образом, мы не можем хранить в куки большие данные.
Общее количество куки на один домен ограничивается примерно 20+. Точное ограничение зависит от конкретного браузера.

//как происходит компиляция кода

DNS
Domaine name system
Сначала браузер проверить в кеше

Если запрос новый то сначала идет запрос к ресолверу (разпознающий днс сервер) сервер находится у нашего интернет провайдера. Он ищет сайт в своем кеше 
Если не находит то делает запрос к корневому root серверу 
Root сервер находится на самом верху днс иерархии (1 уровень ) Он не один их множество. Он даст ответ где искать. Те если у нас .ру он скажет иди спроси у cctld 

Далее мы обращаемся к доменну верхнего уровня Top level domaine 

gtld(generic top level domaine) .com .edu .ai 
cctld(country code top level domaine) .ru .uk .
Дальше они отправляют его к
Серверу авторитативных имен, который выдаст ip adress

HTTP это протокол. те определенный набор правил для отпрвки данных. Это клиент серверный протокол. Работает по принципу запрос - ответ 

HTTPS надо сгенерировать сертификат, либо покупаем сертификат. Устанавливаем сертификат на сервер, ключ и цепочку сертификатов от купленного до корневого. Затем меняем на nginx порт с 80 на 443 защищенный. Указывается путь к сертификатам

Протокол HTTP/2 существенно ускоряет открытие сайтов за счет следующих особенностей:
* соединения: несколько запросов могут быть отправлены через одно TCP-соединение, и ответы могут быть получены в любом порядке. Отпадает необходимость держать несколько TCP-соединений;
* приоритеты потоков: клиент может задавать серверу приоритеты — какого типа ресурсы для него более важны, чем другие;
* сжатие заголовка: размер заголовка HTTP может быть сокращен;
* push-отправка данных со стороны сервера: сервер может отправлять клиенту данные, которые тот еще не запрашивал, например, на основании данных о том, какую следующую страницу открывают пользователи.

Дает ли что-то HTTP/2 веб-разработчикам?
Да! HTTP/2 позволяет избавиться от целого вагона старых трюков, призванных ускорить загрузку страниц без HTTP/2. Перечислим их:
* домен-шардинг или использование множественных родственных доменов для скачивания файлов, чтобы позволить установить большее число TCP-соединений;
* спрайты из картинок — объединение картинок в один файл для снижения числа запросов. Однако такой файл должен сначала загрузиться целиком, прежде, чем будет показана хоть одна картинка. К тому же, обработка больших файлов съедает больше памяти;
* объединение файлов CSS и Javascript, что также делается для снижения количества запросов, и также увеличивает занимаемую память;
* инлайн-включения или помещение CSS и Javascript, а иногда даже и картинок внутрь HTML-файла, чтобы снизить число соединений. В то же время приводит к тому, что страница не показывается, пока весь файл не загрузится;
* домены без cookie: загрузка картинок, CSS и Javascript с другого домена, где не используются cookie.

Есть еще ftp протокол

