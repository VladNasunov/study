// O большое
// Константная       O(1)         ОХРЕНЕННО!!
// Логарифмическая   O(log N)     КРУТО!
// Линейная          O(N)         НОРМАС.
// Линейно-
// логарифмическая   O(N log N)   БЛИИИН...

//Линейный поиск
const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];

function lineAlg(arr, item) {
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] === item) {
      return i;
    }
  }
  return "not found";
}
//O(n)
// console.log(lineAlg(arr, 6));

//Бинарный поиск
function binarySearch(arr, item) {
  let start = 0;
  let end = arr.length;
  let middle;
  let position = -1;
  let flag = false;
  while (flag === false && start <= end) {
    middle = Math.floor((start + end) / 2);
    if (arr[middle] === item) {
      flag = true;
      position = middle;
      return position;
    }
    if (arr[middle] < item) {
      start = middle + 1;
    } else {
      end = middle - 1;
    }
  }
  return position;
}

//O(log2n)
// console.log(binarySearch(arr, 15));

//Бинарный поиск рекурсивно
function binaryRecSearch(arr, item, start, end) {
  let middle = Math.floor((start + end) / 2);
  if (arr[middle] === item) {
    return middle;
  }
  if (arr[middle] < item) {
    return binaryRecSearch(arr, item, middle + 1, end);
  } else {
    return binaryRecSearch(arr, item, start, middle - 1);
  }
}
// console.log(binaryRecSearch(arr, 4, 0, arr.length))

const unsortedArr = [9, 3, 6, 12, 13, 76, 2, 0, 4, 14];
let count = 0;

//Сортировка выбором
//Перебираем массив двумя циклами, второй цикл индекс на одну позицию больше
//Если j меньше indexMin тогда меняем их местами в массиве
function sortCh(arr) {
  for (let i = 0; i < arr.length; i++) {
    let indexMin = i;
    for (let j = i + 1; j < arr.length; j++) {
      if (arr[j] < arr[indexMin]) {
        indexMin = j;
      }
      count += 1;
    }
    let temp = arr[i]; //3 индекс 0
    arr[i] = arr[indexMin]; //0 элемент равен 9 те 1 элементу
    arr[indexMin] = temp; //1 элемент равен 0 элементу те 3
  }
  return arr;
}
//Сложность O(n*n)
// console.log(sortCh(unsortedArr));
// console.log(count);

//Сортировка пузырьком
function bubblingSort(arr) {
  let temp;
  for (let i = 0; i < arr.length; i++) {
    for (let j = 0; j < arr.length; j++) {
      if (arr[j + 1] < arr[j]) {
        temp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = temp;
      }
      count += 1;
    }
  }
  return arr;
}

//O(n*n) сложность с алгоритмом выбора одинакова, но сортировка пузырьком менее эффективна
// console.log(bubblingSort(unsortedArr))
// console.log(count)

//Быстрая сортировка Сортировка Хоара
//принцип разделяй и властвуй

function fastSort(arr) {
  if (arr.length <= 1) {
    return arr;
  }
  let pivotIndex = Math.floor(arr.length / 2);
  let pivot = arr[pivotIndex];
  let less = [];
  let greater = [];
  for (let i = 0; i < arr.length; i++) {
    if (i === pivotIndex) continue;
    if (arr[i] < pivot) {
      less.push(arr[i]);
    } else {
      greater.push(arr[i]);
    }
  }
  return [...fastSort(less), pivot, ...fastSort(greater)];
}
console.log(fastSort(unsortedArr));

// Basic operations: sort, map, filter, reduce
// Algorithms complexity basics (O(1), O(N), ...)
// Data structures: array, stack, queue, linked-list, tree, hash table (map), set

// const arr = [-3, 0, 1, 3, 10]; // 3
// function binarySearch(arr, item) {
//   let start = 0;
//   let end = arr.lenght;
//   let flag = false;
//   let position;
//   let middle;

//   while (flag === false && start <= end) {
//     middle = Math.floor((start + end) / 2);
//     if (arr[middle] === item) {
//       flag = true;
//       position = middle;
//       return position;
//     }
//     if(arr[middle] < item){
//         start = middle + 1
//     } else {
//         end = middle - 1
//     }
//   }
//   return position
// }
// console.log(binarySearch(arr, 3))

//Graphs поиск в ширину
// const graph = {};
// graph.a = ["b", "c"];
// graph.b = ["f"];
// graph.c = ["d", "e"];
// graph.d = ["f"];
// graph.e = ["f"];
// graph.f = ["g"];
//Данная функция кладет стартовую позицию в массив, затем берет первый элемент массива и проверяет есть ли в объекте под данным ключом конечная точка. Если нет то мы кладем то что осталось в массиве и новый массив из свойства объекта под данным ключом
// Операция повторяется пока мы не найдем конечную точку либо вернет false

// const breadthSearch = (graph, start, end) => {
//   let queue = [];
//   queue.push(start);
//   while (queue.length > 0) {
//     const current = queue.shift();
//     if (!graph[current]) {
//       graph[current] = [];
//     }
//     if (graph[current].includes(end)) {
//       return true;
//     } else {
//       queue = [...queue, ...graph[current]];
//     }
//   }
//   return false;
// };
// console.log(breadthSearch(graph, "a", "g"));

//Алгоритм Дейкстры поиск кратчайшего пути

const graph = {};
graph.a = { b: 2, c: 1 };
graph.b = { f: 7 };
graph.c = { d: 5, e: 2 };
graph.d = { f: 2 };
graph.e = { f: 1 };
graph.f = { g: 1 };
graph.g = {};

function shortPath(graph, start, end) {
  const costs = {};
  const prosessed = [];
  let neigbors = {};
  Object.keys(graph).forEach((node) => {
    if (node !== start) {
      let value = graph[start][node];
      costs[node] = value || 1000000000;
    }
  });
  let node = findNodeLowestCost(costs, prosessed);
  while (node) {
    const cost = costs[node];
    neigbors = graph[node];
    Object.keys(neigbors).forEach((neigbor) => {
      let newCost = cost + neigbors[neigbor];
      if (newCost < costs[neigbor]) {
        costs[neigbor] = newCost;
      }
    });
    prosessed.push(node);
    node = findNodeLowestCost(costs, prosessed);
  }
  return costs;
}
function findNodeLowestCost(costs, prosessed) {
  let lowestCost = 1000000000;
  let lowestNode;
  Object.keys(costs).forEach((node) => {
    let cost = costs[node];
    if (cost < lowestCost && !prosessed.includes(node)) {
      lowestCost = cost;
      lowestNode = node;
    }
  });
  return lowestNode;
}
console.log(shortPath(graph, "a", "g"));


//Структуры данных 
// Что такое структуры данных?
// По сути, это способы хранить и организовывать данные, чтобы эффективней решать различные задачи. Данные можно представить по-разному.
// Структуры данных реализованы с помощью алгоритмов, алгоритмы — с помощью структур данных. Всё состоит из структур данных и алгоритмов,

// Структуры данных позволяют производить 4 основных типа действий: доступ, поиск, вставку и удаление.
//                           Доступ      Поиск       Вставка      Удаление
// ------------------------------------------------------------------------
//                 Массив    O(1)        O(N)        O(N)         O(N)
//         Связный список    O(N)        O(N)        O(1)         O(1)
// Двоичное дерево поиска    O(log N)    O(log N)    O(log N)     O(log N)

// https://habr.com/ru/post/497476/
// 1. Стек (вызовов) (Stack)
// Стек следует принципу LIFO (Last In First Out — последним вошел, первым вышел). Если вы сложили книги друг на друга, и захотели взять самую нижнюю книгу, то сначала возьмете верхнюю, затем следующую и т.д. Кнопка «Назад» в браузере позволяет перейти (вернуться) на предыдущую страницу.

// Стек имеет следующие методы:

// push: добавить новый элемент
// pop: удалить верхний элемент, вернуть его
// peek: вернуть верхний элемент
// length: вернуть количество элементов в стеке

// Массив в JS имеет атрибуты стека, но мы построим его с нуля с помощью function Stack():

// 2. Очередь (кью) (Queue)
// Очередь напоминает стек. Разница состоит в том, что очередь следует принципу FIFO (First In First Out — первым вошел, первым вышел). Когда вы стоите в очереди, первый в ней всегда будет первым.
// Очередь имеет следующие методы:

// enqueue: войти в очередь, добавить элемент в конец
// dequeue: покинуть очередь, удалить первый элемент и вернуть его
// front: получить первый элемент
// isEmpty: проверить, пуста ли очередь
// size: получить количество элементов в очереди 
// Массив в JS имеет некоторые атрибуты очереди, поэтому мы можем использовать его для демонстрации:

// 3. Связный список (связанный, список узлов и ссылок или указателей) (Linked List)
// Буквально, связный список — это цепочечная структура данных, где каждый узел состоит из двух частей: данных узла и указателя на следующий узел. Связный список и условный массив являются линейными структурами данных с сериализованным хранилищем. Отличия состоят в следующем:

// Выделение памяти
// Массив
// Статическое, происходит последовательно во время компиляции
// Связный список
// Динамическое, происходит асинхронно во время запуска (выполнения)

// Получение элементов
// Массив
//Поиск по индексу, высокая скорость
// Связный список
// Поиск по всем узлам очереди, скорость менее высокая

// Добавление/удаление элементов
// Массив
// В связи с последовательным и статическим распределением памяти скорость ниже
// Связный список
// В связи с динамическим распределением памяти скорость выше

// Структура
// Массив
// 	Одно или несколько направлений
// Связный список
// Однонаправленный, двунаправленный или циклический

// Односвязный список имеет следующие методы:
// size: вернуть количество узлов
// head: вернуть первый элемент (head — голова)
// add: добавить элемент в конец (tail — хвост)
// remove: удалить несколько узлов
// indexOf: вернуть индекс узла
// elementAt: вернуть узел по индексу
// addAt: вставить узел в определенное место (по индексу)
// // removeAt: удалить определенный узел (по индексу)

// 4. Коллекция (значений) (Set)
// Коллекция (множество) — одна из основных концепций математики: набор хорошо определенных и обособленных объектов. ES6 представил коллекцию, которая имеет некоторое сходство с массивом. Тем не менее, коллекция не допускает включения повторяющихся элементов и не содержит индексов.

// Стандартная коллекция имеет следующие методы:

// values: вернуть все элементы в коллекции
// size: вернуть количество элементов
// has: проверить, имеется ли элемент в коллекции
// add: добавить элемент
// remove: удалить элемент
// union: вернуть область пересечения двух коллекций
// difference: вернуть отличия двух коллекций
// subset: проверить, является ли одна коллекция подмножеством другой

// 5. Хеш-таблица (таблица кэширования) (Hash Table)
// Хеш-таблица — это структура данных, которая строится по принципу ключ-значение. Из-за высокой скорости поиска значений по ключам, она используется в таких структурах, как Map, Dictionary и Object. Как показано на рисунке, хеш-таблица имеет hash function, преобразующую ключи в список номеров, которые используются как имена (значения) ключей. Время поиска значения по ключу может достигать O(1). Одинаковые ключи должны возвращать одинаковые значения — в этом суть функции хэширования.

// Хеш-таблица имеет следующие методы:

// add: добавить пару ключ/значение
// remove: удалить пару
// lookup: найти значение по ключу

// Древовидная структура — это многослойная (многоуровневая) структура. Это также нелинейная структура, в отличие от массива, стека и очереди. Данная структура очень эффективна в части добавления и поиска элементов. Вот некоторые концепции древовидной структуры:

WeakMap – принципиально другая структура в этом аспекте. Она не предотвращает удаление объектов сборщиком мусора, когда эти объекты выступают в качестве ключей.
* Первое его отличие от Map в том, что ключи в WeakMap должны быть объектами, а не примитивными значениями:
WeakMap – это Map-подобная коллекция, позволяющая использовать в качестве ключей только объекты, и автоматически удаляющая их вместе с соответствующими значениями, как только они становятся недостижимыми иными путями.
* Итого
WeakSet – это Set-подобная коллекция, которая хранит только объекты и удаляет их, как только они становятся недостижимыми иными путями.
Обе этих структуры данных не поддерживают методы и свойства, работающие со всем содержимым сразу или возвращающие информацию о размере коллекции. Возможны только операции на отдельном элементе коллекции.
WeakMap и WeakSet используются как вспомогательные структуры данных в дополнение к «основному» месту хранения объекта. Если объект удаляется из основного хранилища и нигде не используется, кроме как в качестве ключа в WeakMap или в WeakSet, то он будет удалён автоматически