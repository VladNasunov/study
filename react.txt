
React, pure components, context, react.element, react component
async setState
Class and functional components
Class lifecycle events, main hooks
Controlled and uncontrolled components, forms
State, props and context
React event system
Knows about existing Prop types
Refs
Basic understanding of virtual dom, components rendering system (when component re renders, shouldComponentUpdate, keys)
React Router
Knows about existing React Devtools
Used any of state management library (Redux, Mobx, Reflux, etc)

1 what is JSX?

Class lifecycle events, main hooks

Оптимизирует процесс отрисовки интерфейсов
нет опр методов и пр типа валидации форм и тд
JSX
Без jsx
const h1 = React.createElement("h1", { className: "title" }, "hello world");
with JSX
const h1 = <h1 className>hello world</h1>;
теги jsx это обычные объекты

Props and state
ДЛя взаимодействия между родителями и дочерними элементами, однонаправленние данные, которые нельзя менять


State это обычный объект с данными, он мутабельный и в этом его суть
ЧТо происходит когда обновляется State? react получает объект переданный в setState и начинает соединять с предыдущим стейтом. После мы получаем новый стейт и реакт полностью создает новый virtual dom и после этого сравнивает с реальным домом, находит места изменения и после этого только измененные места начинает менять 
setState((prevState, props)=>{
    return{
        counter: prevState.counter + props.counter
    }
})
Второй опциональный параметр переданный в setState это функция которая будет вызвана тогда когда реакт закончит цикл изменения состаяния

useReducer
useContext
useLayoutEffect когда надо заблокировать отрисовку компонента, и может дать нам совершить доп действия, 

React Fiber новый движок с 16 версии, основная задача данного движка была создание инкрементального виртуального дома, увеличенная производительность рендеринга

Разница между Flow(статически анализирует типы) and Proptypes(проверяет типы входящих компонентов)

refs createRef()
получаем ссылку на дом элемент
Это нужно когда 1 сделат фокус на элемент 2 хотим выделить текст или взаимодействие с анимацией
пример
const ref1 = useRef();
useEffect(() => {
  ref1.current.focus();
});
<input type="text" ref={ref1}/>

Когда классовые а когда функциональные компоненты
Если только для отрисовки то только функциональные
Хуки покрывают всю функциональность классов кроме, getSnapshotBeforeUpdate, componentDidCatch
Контролируемые компоненты, в которых присутсвует взаимодействие со стейтом. Те мы записываем в стейт каждый ввод данных

Неконтролируемые например textarea но мы не записываем каждый ввод данных

Фрагменты идея в том что хотим отрендерить текст но не хотим иметь корневой элемент. И когда мы его используем не создается родительский тег тем самым облегчаем html он не создает лишние узлы

Обработка пользовательских событий 
Synthetic event обертка вокруг события ивента которая представляет api для всех браузеров. Чтобы во всех браузеров все было одинаково
OnCLickCapture работает на этапе перехвата
::this.handleSmth() сокращалка для this.handleSmth.bind(this)

*shouldComponentUpdate метод для оптимизации, возращает true or false/ те мы можем сказать что если обновляется определенный statе поля то реакту не надо делать никаких обновлений

* Pure component
Если будем наследоватся не от React.component а от React.pureComponent
Тогда Реакт автоматически реализует shouldcomponentupdate и оптимизирует его 
*error boundaries
Реакт компонент у которого есть специальный жизненный этам, componentDidCatch() и если компонент который мы положили в качестве родителя выдает ошибку то componentDidCatch(), срабоатет и обработает ошибку сделав например setState({error: true})
* Если используем функциональный компонент то это функция react Memo

Virtual dom
Виртуальный DOM (VDOM) — это концепция программирования, в которой идеальное или «виртуальное» представление пользовательского интерфейса хранится в памяти и синхронизируется с «настоящим» DOM при помощи библиотеки, такой как ReactDOM
Такой подход и делает API React декларативным: вы указываете, в каком состоянии должен находиться пользовательский интерфейс, а React добивается, чтобы DOM соответствовал этому состоянию. Это абстрагирует манипуляции с атрибутами, обработку событий и ручное обновление DOM, которые в противном случае пришлось бы использовать при разработке приложения.

Вместо того, чтобы взаимодействовать с DOM напрямую, мы работаем с его легковесной копией. Мы можем вносить изменения в копию, исходя из наших потребностей, а после этого применять изменения к реальному DOM
При этом происходит сравнение DOM-дерева с его виртуальной копией, определяется разница и запускается перерисовка того, что было изменено.

Часто нам надо отрендерить массив элементов в реакт
что нужно учитывать при переборе и выведении этого массива

webpack
Webpack — это модульный сборщик, который позволяет объединять ресурсы и библиотеки, необходимые для проекта, в один файл.

Babel он помогает в транспайлинге es6,es7, jsx в es5
babel-core: Преобразует код ES6 в ES5.
babel-loader: Помощник Webpack для транспайлинга кода, задает пресеты.
babel-preset-env: Пресет, который помогает babel конвертировать код ES6, ES7 и ES8 в код ES5.
babel-preset-react: Пресет, преобразующий JSX в JavaScript.

babel-preset - относится к бабелю а не к вебпаку. Это просто набор настроек.

Композиция реакт

Реакт элемент Реакт компонент 

Отличие классового от функционального 


* Что такое маршрутизация React?
React routing - это мощная библиотека маршрутизации, построенная на основе React, которая помогает добавлять новые экраны и потоки в приложение. Это позволяет синхронизировать URL-адрес с данными, отображаемыми на веб-странице. Он отвечает за поддержание стандартизированных структур и поведения и используется для разработки одностраничных веб-приложений. React routing имеет простой API.

* В Javascript правило слияния объектов гласит: если объекты имеют свойства с одинаковыми ключами(названиями), то значение ключа последнего передаваемого в Object.assign() объекта выигрывает и перезаписывает все предыдущие.

Следовательно, повторим еще раз.
Если вы вызываете setState() с объектом несколько раз — React запустит процедуру слияния объектов в один в целях оптимизации своей работы. И тогда, если в объектах наличествуют свойства с одинаковыми ключами — в итоговый объект запишется лишь значение последнего из них.

С учетом того что мы выяснили о setState() — итоговое значение score будет не 3, а 1, потому что React не вызывает setState 3 раза, а делает из него один следующий вызов this.setState({score : this.state.score + 1});

 incrementCount(){
   this.setState((prevState, props) => ({
      count: prevState.count + 1
    }));
   this.setState((prevState, props) => ({
      count: prevState.count + 1
    }));
  }
  Как видите, когда React обнаруживает множественные вызовы функциональных setState(), вместо того чтобы объединить все эти вызовы в один он исполняет их ровно в том порядке в каком они были вызваны.
React начинает обновлять состояние приложения с каждым вызовом функционального setState(), и каждому следующему в очереди вызову он передает уже вычисленное от предыдущего.

* Второй параметр для setState() - это дополнительная функция обратного вызова, которая будет выполняться после завершения setState и повторной отрисовки компонента. Обычно вместо неё мы рекомендуем использовать componentDidUpdate().


В процессе работы компонент проходит через ряд этапов жизненного цикла. На каждом из этапов вызывается определенная функция, в которой мы можем определить какие-либо действия:

* constructor(props): конструктор, в котором происходит начальная инициализация компонента
* static getDerivedStateFromProps(props, state): вызывается непосредственно перед рендерингом компонента. Этот метод не имеет доступа к текущему объекту компонента (то есть обратиться к объкту компоненту через this) и должен возвращать объект для обновления объекта state или значение null, если нечего обновлять.
* render(): рендеринг компонента
* componentDidMount(): вызывается после рендеринга компонента. Здесь можно выполнять запросы к удаленным ресурсам
* componentWillUnmount(): вызывается перед удалением компонента из DOM

Кроме этих основных этапов или событий жизненного цикла, также имеется еще ряд функций, которые вызываются при обновлении состояния после начального рендеринга компонента, если в компоненте происходят обновления:
* static getDerivedStateFromProps(props, state)
* shouldComponentUpdate(nextProps, nextState): вызывается каждый раз при обновлении объекта props или state. В качестве параметра передаются новый объект props и state. Эта функция должна возвращать true (надо делать обновление) или false (игнорировать обновление). По умолчанию возвращается true. Но если функция будет возвращать false, то тем самым мы отключим обновление компонента, а последующие функции не будут срабатывать.
* render(): рендеринг компонента (если shouldComponentUpdate возвращает true)
* getSnapshotBeforeUpdate(prevProps, prevState): вызывается непосредственно перед компонента. Он позволяет компоненту получить информацию из DOM перед возможным обновлением. Возвращает в качестве значения какой-то отдельный аспект, который передается в качестве третьего параметра в метод componentDidUpdate() и может учитываться в componentDidUpdate при обновлении. Если нечего возвращать, то возвращается значение null
* componentDidUpdate(prevProps, prevState, snapshot): вызывается сразу после обновления компонента (если shouldComponentUpdate возвращает true). В качестве параметров передаются старые значения объектов props и state. Третий параметр - значение, которое возвращает метод getSnapshotBeforeUpdate

* Компонент высшего порядка:
* принимает компонент в качестве аргумента;
* возвращает другой компонент;
* возвращенный компонент отображает оригинальный компонент;
* Расширяют возможность входящих компонетов
* используется для решения проблемы DRY.

function logProps(WrappedComponent){
  class LogProps{
    componentDidUpdate(prevProps){
      console.log('old props', prevProps)
      console.log('old props', this.props)
    }
    render(){
      return <WrappedComponent {...this.props}/>
    }
    return LogProps
  }
}

* React.Memo
React.memo это компонент более высокого порядка, который запоминает результат компонента функции. Если компонент возвращает один и тот же результат с одинаковыми реквизитами, его обертывание в memo может привести к повышению производительности
const Header = ({title}) => <h1>{title}</h1>
export default React.memo(Header); 

Теперь, когда Header визуализируется, он будет делать неглубокое сравнение с его реквизитами. Если эти реквизиты одинаковы, он пропустит отрисовку и вместо этого вернет свое последнее отрисованное значение.

* useMemo
useMemo позволяет запомнить результаты функции и будет возвращать этот результат до тех пор, пока массив зависимостей не изменится.

* useCallback
useCallback может предотвратить ненужную визуализацию между родительским и дочерним компонентами.

Этот компонент будет вызывать повторную визуализацию Child элемента каждый раз, когда это делает Parent, даже если Child элемент является PureComponent или завернут в React.memo, потому что при каждом рендеринге onClick будет отличаться. useCallback может справиться

const Parent = () => {  
  const [showExtraDetails, setShowExtraDetails] = useState(false);  
  const handleClick = useCallback(  
    () => {  
    showData(showExtraDetails);  
  },  
  [showExtraDetails],  
);  
  return (  
    [...]  
    <Child onClick={() => {handleClick}/>  
    [...]  
  );  
}  
Теперь handleClick будет иметь то же значение, пока showExtraDetails не изменится, что позволит сократить количество раз, когда Child рендерится.


* Классовый компонент является предохранителем, если он включает хотя бы один из следующих методов жизненного цикла: static getDerivedStateFromError() или componentDidCatch(). Используйте static getDerivedStateFromError() при рендеринге запасного UI в случае отлова ошибки. Используйте componentDidCatch() при написании кода для журналирования информации об отловленной ошибке.

Только классовые компоненты могут выступать в роли предохранителей. На практике чаще всего целесообразным будет один раз описать предохранитель и дальше использовать его по всему приложению.

Обратите внимание, что предохранители отлавливают ошибки исключительно в своих дочерних компонентах. Предохранитель не сможет отловить ошибку внутри самого себя. Если предохранителю не удаётся отрендерить сообщение об ошибке, то ошибка всплывает до ближайшего предохранителя, расположенного над ним в дереве компонентов. Этот аспект их поведения тоже напоминает работу блоков catch {} в JavaScript.

Предохранители не отлавливают ошибки, произошедшие в обработчиках событий.s